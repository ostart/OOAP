/* 
2.1
abstract class LinkedList<T>

    // интерфейс класса, реализующий АТД LinkedList
    public const int EMPTY = 0; // связанный список пустой
    public const int NOT_EMPTY = 1; // связанный список заполнен

    // конструктор
    // постусловие: создан новый пустой связанный список
    public LinkedList<T> LinkedList();


    // команды:
    // предусловие: связанный список не пустой
    // постусловие: курсор переметился на первый узел связанного списка
    public void head();

    // предусловие: связанный список не пустой
    // постусловие: курсор переметился на последний узел связанного списка
    public void tail();

    // предусловие: связанный список не пустой
    // постусловие: курсор переметился на один узел вправо
    public void right();

    // постусловие: вставлен следом за текущим узлом новый узел с заданным значением
    public void put_right(T value);

    // предусловие: связанный список не пустой
    // постусловие: вставлен перед текущим узлом новый узел с заданным значением
    public void put_left(T value);

    // предусловие: связанный список не пустой
    // постусловие: текущий узел удален. курсор сместился к правому соседу, если он есть, в противном случае курсор сместился к левому соседу, если он есть
    public void remove();

    // постусловие: связанный список пустой
    public void clear();

    // постусловие: добавлен новый узел в хвост списка
    public void add_tail(T value);

    // предусловие: связанный список не пустой
    // постусловие: значение текущего узла заменено заданным значением
    public void replace(T value);

    // предусловие: связанный список не пустой
    // постусловие: курсор установлен на следующий узел с искомым значением (по отношению к текущему узлу)
    public void find(T value);

    // предусловие: связанный список не пустой
    // постусловие: в списке удалены все узлы с заданным значением
    public void remove_all(T value);


    // запросы:
    // предусловие: связанный список не пустой
    public T get();

    public int size();

    // предусловие: связанный список не пустой
    public bool is_head();

    // предусловие: связанный список не пустой
    public bool is_tail();

    public bool is_value();


    // дополнительные запросы:
    public int get_empty_status(); // возвращает значение EMPTY


2.2. Потому, что сведение операции tail к head + смещения через весь список нельзя считать эффективным.
2.3. Потому, что наличие операции find позволяет работать с целым списком, как со списком отобранных требуемых значений, передвигаясь только по ним
*/